SOLID : 클린 코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리

 

- SRP(Single Reponsibility Principle) : 단일 책임 원칙, 한 클래스는 하나의 책임만 가져야 한다. 

1. 하나의 책임이라는 것은 모호함, 클수도 작을수도 있고 문맥에 따라 다름 --> 중요한 기준은 '변경'이다 

2. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것 ex) UI 변경, 객체의 생성과 사용을 분리

 

- OCP(Open/Closed Principle) : 개방-폐쇄 원칙, 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다

1. 다형성 활용

2. 인터페이스를 구현한 새로운 클래스 

3. 다형성은 사용했지만 코드를 변경이 필요함(객체 변경)

 

 

- LSP(Liskov Substitution Principle) : 리스코프 치환 원칙

1. 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.

2. 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙 필요

ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반, 느리더라도 앞으로 가야함

 

- ISP(Interface Segregation Principle) : 인터페이스 분리 원칙

1. 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다

2. 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리

3. 사용자 클라이언트 -> 운전 클라이언트, 정비사 클라이언트로 분리

4. 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음

5. 인터페이스가 명확해지고, 대체 가능성이 높아진다.

 

- Depenency Inversion Principle) : 의존관계 역전 원칙

1. 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다."

2. 역할에 의존해야하고 구현에 의존하지 않아야함